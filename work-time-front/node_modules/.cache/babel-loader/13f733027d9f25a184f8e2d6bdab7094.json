{"ast":null,"code":"import DurationService from \"../API/DurationService\";\nconst EMPLOYEE_ID = 31;\n\nasync function FixExecuting() {\n  let duration = await DurationService.getByUserAndIsLast(EMPLOYEE_ID);\n\n  if (duration.taskUri !== null) {\n    const workDate = new Date(duration.workDate);\n    const taskUri = duration.taskUri;\n\n    if (workDate.getDay() === new Date().getDay()) {\n      const startTime = new Date(duration.startTime);\n      const diff = Date.now() - startTime.getTime();\n      const newTimeCount = duration.timeCount + diff;\n      await DurationService.update(duration._links.self.href, {\n        timeCount: newTimeCount,\n        startTime: new Date()\n      });\n    } else {\n      await DurationService.update(duration._links.self.href, {\n        isLast: false\n      });\n      await DurationService.create({\n        isLast: true,\n        startTime: new Date(),\n        employeeId: EMPLOYEE_ID,\n        workDate: new Date(),\n        timeCount: 0,\n        taskUri: taskUri\n      });\n    }\n  }\n\n  return duration;\n}\n\n_c = FixExecuting;\nexport default FixExecuting;\n\nvar _c;\n\n$RefreshReg$(_c, \"FixExecuting\");","map":{"version":3,"names":["DurationService","EMPLOYEE_ID","FixExecuting","duration","getByUserAndIsLast","taskUri","workDate","Date","getDay","startTime","diff","now","getTime","newTimeCount","timeCount","update","_links","self","href","isLast","create","employeeId"],"sources":["C:/big-projects/work-time/work-time-front/src/business-logic/FixTimeCount.js"],"sourcesContent":["import DurationService from \"../API/DurationService\";\r\n\r\nconst EMPLOYEE_ID = 31;\r\n\r\nasync function FixExecuting() {\r\n    let duration = await DurationService.getByUserAndIsLast(EMPLOYEE_ID);\r\n\r\n    if (duration.taskUri !== null) {\r\n        const workDate = new Date(duration.workDate);\r\n        const  taskUri = duration.taskUri;\r\n\r\n        if(workDate.getDay() === new Date().getDay()) {\r\n            const startTime = new Date(duration.startTime);\r\n            const diff = Date.now() - startTime.getTime();\r\n            const newTimeCount = duration.timeCount + diff;\r\n\r\n            await DurationService.update(duration._links.self.href, {timeCount: newTimeCount\r\n                ,startTime : new Date()});\r\n\r\n        } else {\r\n            await DurationService.update(duration._links.self.href, {isLast: false});\r\n            await DurationService.create({\r\n                isLast: true, startTime: new Date(), employeeId: EMPLOYEE_ID\r\n                , workDate: new Date(), timeCount: 0, taskUri :  taskUri\r\n            });\r\n        }\r\n    }\r\n\r\n    return duration;\r\n}\r\n\r\nexport default FixExecuting;"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AAEA,MAAMC,WAAW,GAAG,EAApB;;AAEA,eAAeC,YAAf,GAA8B;EAC1B,IAAIC,QAAQ,GAAG,MAAMH,eAAe,CAACI,kBAAhB,CAAmCH,WAAnC,CAArB;;EAEA,IAAIE,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;IAC3B,MAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASJ,QAAQ,CAACG,QAAlB,CAAjB;IACA,MAAOD,OAAO,GAAGF,QAAQ,CAACE,OAA1B;;IAEA,IAAGC,QAAQ,CAACE,MAAT,OAAsB,IAAID,IAAJ,GAAWC,MAAX,EAAzB,EAA8C;MAC1C,MAAMC,SAAS,GAAG,IAAIF,IAAJ,CAASJ,QAAQ,CAACM,SAAlB,CAAlB;MACA,MAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,KAAaF,SAAS,CAACG,OAAV,EAA1B;MACA,MAAMC,YAAY,GAAGV,QAAQ,CAACW,SAAT,GAAqBJ,IAA1C;MAEA,MAAMV,eAAe,CAACe,MAAhB,CAAuBZ,QAAQ,CAACa,MAAT,CAAgBC,IAAhB,CAAqBC,IAA5C,EAAkD;QAACJ,SAAS,EAAED,YAAZ;QACnDJ,SAAS,EAAG,IAAIF,IAAJ;MADuC,CAAlD,CAAN;IAGH,CARD,MAQO;MACH,MAAMP,eAAe,CAACe,MAAhB,CAAuBZ,QAAQ,CAACa,MAAT,CAAgBC,IAAhB,CAAqBC,IAA5C,EAAkD;QAACC,MAAM,EAAE;MAAT,CAAlD,CAAN;MACA,MAAMnB,eAAe,CAACoB,MAAhB,CAAuB;QACzBD,MAAM,EAAE,IADiB;QACXV,SAAS,EAAE,IAAIF,IAAJ,EADA;QACYc,UAAU,EAAEpB,WADxB;QAEvBK,QAAQ,EAAE,IAAIC,IAAJ,EAFa;QAEDO,SAAS,EAAE,CAFV;QAEaT,OAAO,EAAIA;MAFxB,CAAvB,CAAN;IAIH;EACJ;;EAED,OAAOF,QAAP;AACH;;KAzBcD,Y;AA2Bf,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}