{"ast":null,"code":"import TaskService from \"../API/TaskService\";\nimport DurationService from \"../API/DurationService\";\nconst EMPLOYEE_ID = 1;\n\nasync function startExecuting(task) {\n  if (task.status === 'NEW') {\n    await TaskService.update(task._links.self.href, {\n      status: 'RUNNING',\n      user: EMPLOYEE_ID\n    });\n  }\n\n  let duration = await DurationService.getByUserAndIsLast(EMPLOYEE_ID);\n\n  if (duration.workDate.getDay() === new Date().getDay()) {\n    await DurationService.update(duration._links.self.href, {\n      startTime: new Date()\n    });\n  } else {\n    await DurationService.update(duration._links.self.href, {\n      isLast: false\n    });\n    await DurationService.create({\n      isLast: true,\n      startTime: new Date(),\n      employeeId: EMPLOYEE_ID,\n      workDate: new Date(),\n      timeCount: 0\n    });\n  }\n}\n\nexport default startExecuting;","map":{"version":3,"names":["TaskService","DurationService","EMPLOYEE_ID","startExecuting","task","status","update","_links","self","href","user","duration","getByUserAndIsLast","workDate","getDay","Date","startTime","isLast","create","employeeId","timeCount"],"sources":["C:/big-projects/work-time/work-time-front/src/business-logic/StartExecutingTask.js"],"sourcesContent":["import TaskService from \"../API/TaskService\";\r\nimport DurationService from \"../API/DurationService\";\r\n\r\nconst EMPLOYEE_ID = 1;\r\n\r\nasync function startExecuting(task) {\r\n    if (task.status === 'NEW') {\r\n        await TaskService.update(task._links.self.href, {status: 'RUNNING', user: EMPLOYEE_ID});\r\n    }\r\n\r\n    let duration = await DurationService.getByUserAndIsLast(EMPLOYEE_ID);\r\n\r\n    if(duration.workDate.getDay() === new Date().getDay()) {\r\n        await DurationService.update(duration._links.self.href, {startTime: new Date()});\r\n\r\n    } else {\r\n        await DurationService.update(duration._links.self.href, {isLast: false});\r\n        await DurationService.create({\r\n            isLast: true, startTime: new Date(), employeeId: EMPLOYEE_ID\r\n            , workDate: new Date(), timeCount: 0\r\n        });\r\n    }\r\n}\r\n\r\nexport default startExecuting;"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,MAAMC,WAAW,GAAG,CAApB;;AAEA,eAAeC,cAAf,CAA8BC,IAA9B,EAAoC;EAChC,IAAIA,IAAI,CAACC,MAAL,KAAgB,KAApB,EAA2B;IACvB,MAAML,WAAW,CAACM,MAAZ,CAAmBF,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiBC,IAApC,EAA0C;MAACJ,MAAM,EAAE,SAAT;MAAoBK,IAAI,EAAER;IAA1B,CAA1C,CAAN;EACH;;EAED,IAAIS,QAAQ,GAAG,MAAMV,eAAe,CAACW,kBAAhB,CAAmCV,WAAnC,CAArB;;EAEA,IAAGS,QAAQ,CAACE,QAAT,CAAkBC,MAAlB,OAA+B,IAAIC,IAAJ,GAAWD,MAAX,EAAlC,EAAuD;IACnD,MAAMb,eAAe,CAACK,MAAhB,CAAuBK,QAAQ,CAACJ,MAAT,CAAgBC,IAAhB,CAAqBC,IAA5C,EAAkD;MAACO,SAAS,EAAE,IAAID,IAAJ;IAAZ,CAAlD,CAAN;EAEH,CAHD,MAGO;IACH,MAAMd,eAAe,CAACK,MAAhB,CAAuBK,QAAQ,CAACJ,MAAT,CAAgBC,IAAhB,CAAqBC,IAA5C,EAAkD;MAACQ,MAAM,EAAE;IAAT,CAAlD,CAAN;IACA,MAAMhB,eAAe,CAACiB,MAAhB,CAAuB;MACzBD,MAAM,EAAE,IADiB;MACXD,SAAS,EAAE,IAAID,IAAJ,EADA;MACYI,UAAU,EAAEjB,WADxB;MAEvBW,QAAQ,EAAE,IAAIE,IAAJ,EAFa;MAEDK,SAAS,EAAE;IAFV,CAAvB,CAAN;EAIH;AACJ;;AAED,eAAejB,cAAf"},"metadata":{},"sourceType":"module"}